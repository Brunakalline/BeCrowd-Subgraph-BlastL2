type BaseInitialized @entity(immutable: true) {
  id: Bytes!
  name: String! # string
  symbol: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BurnNFTFromCollection @entity(immutable: true) {
  id: Bytes!
  collectionId: BigInt! # uint256
  nftId: BigInt! # uint256
  burner: Bytes! # address
  owner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClaimStakeEth @entity(immutable: true) {
  id: Bytes!
  staker: Bytes! # address
  claimAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClaimYieldAndGas @entity(immutable: true) {
  id: Bytes!
  contractAddr: Bytes! # address
  claimableYield: BigInt! # uint256
  gasEtherBalance: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CreateCollectionStakeEthAmountSet @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  prevStakeEthAmount: BigInt! # uint256
  newStakeEthAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DerivedRuleModuleWhitelisted @entity(immutable: true) {
  id: Bytes!
  derivedRuleModule: Bytes! # address
  whitelist: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EmergencyAdminSet @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  oldEmergencyAdmin: Bytes! # address
  newEmergencyAdmin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GovernanceSet @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  prevGovernance: Bytes! # address
  newGovernance: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MaxRoyaltySet @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  prevMaxBaseRoyalty: BigInt! # uint32
  newMaxBaseRoyalty: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ModuleGlobalsCurrencyWhitelisted @entity(immutable: true) {
  id: Bytes!
  currency: Bytes! # address
  prevWhitelisted: Boolean! # bool
  whitelisted: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ModuleGlobalsGovernanceSet @entity(immutable: true) {
  id: Bytes!
  prevGovernance: Bytes! # address
  newGovernance: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ModuleGlobalsTreasuryFeeSet @entity(immutable: true) {
  id: Bytes!
  prevTreasuryFee: Int! # uint16
  newTreasuryFee: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ModuleGlobalsTreasurySet @entity(immutable: true) {
  id: Bytes!
  prevTreasury: Bytes! # address
  newTreasury: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewCollectionCreated @entity {
  id: Bytes!
  collectionOwner: Bytes! # address
  derivedCollectionAddr: Bytes! # address
  derivedRuleModule: Bytes! # address
  collectionId: BigInt! # uint256
  baseRoyalty: BigInt! # uint256
  mintLimit: BigInt! # uint256
  mintExpired: BigInt! # uint256
  mintPrice: BigInt! # uint256
  whiteListRootHash: Bytes! # bytes32
  collInfoURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  items: BigInt!
}

type NewNFTCreated @entity {
  id: Bytes!
  tokenId: BigInt! # uint256
  collectionId: BigInt! # uint256
  derivedFrom: BigInt! # uint256
  creator: Bytes! # address
  nftInfoURI: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Creator @entity {
  id: Bytes!
  address: Bytes!
  itemsNFT: BigInt!
}

type RoyaltyDataSet @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  royaltyAddr: Bytes! # address
  percentage: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetNewRoundReward @entity(immutable: true) {
  id: Bytes!
  rewardId: BigInt! # uint256
  rewardAmount: BigInt! # uint256
  merkleRoot: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeAndYieldContractAddressSet @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  prevStakeAndYieldContractAddress: Bytes! # address
  newStakeAndYieldContractAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StateSet @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  prevState: Int! # uint8
  newState: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
